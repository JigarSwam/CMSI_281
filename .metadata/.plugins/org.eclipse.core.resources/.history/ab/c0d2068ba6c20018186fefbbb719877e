// Jigar Swaminarayan
package forneymonegerie;

public class Forneymonegerie implements ForneymonegerieInterface {

    // Fields
    // ----------------------------------------------------------
    private ForneymonType[] collection;
    private int size;
    private int typeSize;
    private static final int START_SIZE = 16;
    
    
    // Constructor
    // ----------------------------------------------------------
    Forneymonegerie () {
    	collection = new ForneymonType[START_SIZE];
    	size = 0;
    	typeSize = 0;
    }
    
    
    // Methods
    // ----------------------------------------------------------
    public boolean empty () {
        return size == 0;
    }
    
    public int size () {
        return size;
    }
    
    public int typeSize () {
        return typeSize;
    }
    
    public boolean collect (String toAdd) {
    	checkAndGrow();
        for (int i = 0; i < collection.length; i++) {
        	if (collection[i] != null && toAdd.equals(collection[i].type)) {
        		collection[i].count++;
        		collection[typeSize] = new ForneymonType(toAdd, collection[i].count);
        		size++;
        		return false;
        	} else {
        		collection[typeSize] = new ForneymonType(toAdd, 1);
        		typeSize++;
            	size++;
            	return true;
        	}
        }
        return false;
    }
    
    public boolean release (String toRemove) {
        for (int i = 0; i < collection.length; i++) {
        	if (collection[i] != null && toRemove.equals(collection[i].type)) {
        		collection[i].count--;
        		size--;
               	if (collection[i].count == 0) {releaseType(toRemove);}
        		return true;
        	} else {
        		return false;
        	}
        }
        return false;
    }
    
    public void releaseType (String toNuke) {
        for (int i = 0; i < typeSize; i++) {
        	if (collection[i] != null && toNuke.equals(collection[i].type)) {
        		size -= collection[i].count;
        		typeSize--;
        		shiftLeft(i);
        	}
        }
    }
    
    public int countType (String toCount) {
    	for (int i = 0; i < collection.length; i++) {
    		if (collection[i] != null && toCount.equals(collection[i].type)) { 
    			return collection[i].count;
    		}
    	}
    	return 0;
    }
    
    public boolean contains (String toCheck) {
        for (int i = 0; i < collection.length; i++) {
        	if (collection[i] != null && toCheck.equals(collection[i].type)) {
        		return true;
        	}
        }
        return false;
    }
    
    public String nth (int n) {
    	String nthType = "";
    	for (int i = 0; i < size; i++) {
    		System.out.println("N: " + n);
    		System.out.println("Collection count: " + collection[i].count);
    		if (n < collection[i].count) {
    			nthType = collection[i].type;
    		}
    		else {
    			n -= collection[i].count;
    		}
    	}
    	System.out.println(this);
    	return nthType;
    }
    
    public String rarestType () {
    	int currentLowestCount;
    	String typeWithLowestCount = "";
    	ForneymonType isRarestType = new ForneymonType(typeWithLowestCount, 1);
    	for (int i = 0; i < typeSize; i++) {
    		if (collection[i].count <= isRarestType.count) {
    			isRarestType = collection[i];
    			currentLowestCount = collection[i].count;
    			typeWithLowestCount = collection[i].type;
    		}
    	}
    	return typeWithLowestCount;
    }
    
    public Forneymonegerie clone () {
    	Forneymonegerie clone = new Forneymonegerie();
    	for (int i = 0; i < this.size; i++) {
    		clone.collection[i] = this.collection[i];
    	}
    	clone.size = this.size;
    	clone.typeSize = this.typeSize;
    	return clone;
    }
    
    public void trade (Forneymonegerie other) {
        throw new UnsupportedOperationException();
    }
    
    
    // Static methods
    // ----------------------------------------------------------
    public static Forneymonegerie diffMon (Forneymonegerie y1, Forneymonegerie y2) {
    	//boolean isFound;
        throw new UnsupportedOperationException();
    }
    
    public static boolean sameCollection (Forneymonegerie y1, Forneymonegerie y2) {
    	//toString().equals
    	// definition of sets
        throw new UnsupportedOperationException();
    }
    
    
    // Private helper methods
    // ----------------------------------------------------------
    
    // TODO: Add yours here!
    
    private void shiftLeft(int index) {
        for (int i = index; i < size - 1; i++) {
            collection[i] = collection[i + 1];
        }
    }
    
    private void checkAndGrow() {
        if (size < collection.length) {
            return;
        }
        ForneymonType[] newItems = new ForneymonType[collection.length * 2];
        for (int i = 0; i < collection.length; i++) {
            newItems[i] = collection[i];
        }
        collection = newItems;
    }
    
    public String toString() {
    	String result = "";
    	for (int i = 0; i < typeSize; i++) {
    		result += "\"" + collection[i].type + "\""+ ": " + collection[i].count;
    		if (i < typeSize - 1) {
    			result += ", ";
    		}
        }
    	return "[ " + result + " ]";
    }
    
    // Private Classes
    // ----------------------------------------------------------
    private class ForneymonType {
        String type;
        int count;
        
        ForneymonType (String t, int c) {
            type = t;
            count = c;
        }
    }
}
